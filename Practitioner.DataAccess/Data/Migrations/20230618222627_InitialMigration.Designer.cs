// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Practitioner.DataAccess.Context;

#nullable disable

namespace Practitioner.DataAccess.Data.Migrations
{
    [DbContext(typeof(AlliedPractitionerDbContext))]
    [Migration("20230618222627_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PracContactPracEmployer", b =>
                {
                    b.Property<int>("pracContactsId")
                        .HasColumnType("integer");

                    b.Property<int>("pracEmployersId")
                        .HasColumnType("integer");

                    b.HasKey("pracContactsId", "pracEmployersId");

                    b.HasIndex("pracEmployersId");

                    b.ToTable("PracContactPracEmployer");
                });

            modelBuilder.Entity("PracContactPracExperience", b =>
                {
                    b.Property<int>("pracContactsId")
                        .HasColumnType("integer");

                    b.Property<int>("pracExperiencesId")
                        .HasColumnType("integer");

                    b.HasKey("pracContactsId", "pracExperiencesId");

                    b.HasIndex("pracExperiencesId");

                    b.ToTable("PracContactPracExperience");
                });

            modelBuilder.Entity("PracEmployerPracExperience", b =>
                {
                    b.Property<int>("pracEmployersId")
                        .HasColumnType("integer");

                    b.Property<int>("pracExperiencesId")
                        .HasColumnType("integer");

                    b.HasKey("pracEmployersId", "pracExperiencesId");

                    b.HasIndex("pracExperiencesId");

                    b.ToTable("PracEmployerPracExperience");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracBalances");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<int>("PrimaryPhone")
                        .HasColumnType("integer");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<int>("SecondaryPhone")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PracContacts");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracCpdPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Point")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PracContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<int>("RenewalPeriodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PracContactId");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracCpdPoints");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracDocuments");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracEmployer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CommencementDate")
                        .HasColumnType("date");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PracEmployers");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CommencementDate")
                        .HasColumnType("date");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ResignationDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PracExperiences");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracPaymentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<int>("RegisterCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("RenewalCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PracContactId");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracPaymentInformation");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracPlacement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PracContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitonerId")
                        .HasColumnType("integer");

                    b.Property<string>("RenewalPeriodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PracContactId");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracPlacement");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccreditedInstitutionId")
                        .HasColumnType("integer");

                    b.Property<string>("AwardedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("AwardedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CommencementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("CompletionDate")
                        .HasColumnType("date");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PracContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitonerQualificationId")
                        .HasColumnType("integer");

                    b.Property<int>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfessionalQualificationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QualificationCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PracContactId");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracQualifications");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("MemberStatus")
                        .HasColumnType("boolean");

                    b.Property<int?>("PracContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.Property<int>("PracRequirementsId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PracContactId");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracRequirements");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracStudentApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accountant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Member")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PracContactId")
                        .HasColumnType("integer");

                    b.Property<int?>("PracEmployerId")
                        .HasColumnType("integer");

                    b.Property<int>("PractitionerId")
                        .HasColumnType("integer");

                    b.Property<string>("Registrar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistrationOfficer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PracContactId");

                    b.HasIndex("PracEmployerId");

                    b.ToTable("PracStudentApproval");
                });

            modelBuilder.Entity("PracContactPracEmployer", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany()
                        .HasForeignKey("pracContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany()
                        .HasForeignKey("pracEmployersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PracContactPracExperience", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany()
                        .HasForeignKey("pracContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Practitioner.Domain.Entity.PracExperience", null)
                        .WithMany()
                        .HasForeignKey("pracExperiencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PracEmployerPracExperience", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany()
                        .HasForeignKey("pracEmployersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Practitioner.Domain.Entity.PracExperience", null)
                        .WithMany()
                        .HasForeignKey("pracExperiencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracBalance", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracBalances")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracCpdPoint", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany("pracCpdPoints")
                        .HasForeignKey("PracContactId");

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracCpdPoints")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracDocument", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracDocuments")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracPaymentInformation", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany("pracPaymentInformation")
                        .HasForeignKey("PracContactId");

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracPaymentInformation")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracPlacement", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany("pracPlacements")
                        .HasForeignKey("PracContactId");

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracPlacements")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracQualification", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany("pracQualifications")
                        .HasForeignKey("PracContactId");

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracQualifications")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracRequirement", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany("pracRequirements")
                        .HasForeignKey("PracContactId");

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracRequirements")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracStudentApproval", b =>
                {
                    b.HasOne("Practitioner.Domain.Entity.PracContact", null)
                        .WithMany("pracStudentApproval")
                        .HasForeignKey("PracContactId");

                    b.HasOne("Practitioner.Domain.Entity.PracEmployer", null)
                        .WithMany("pracStudentApproval")
                        .HasForeignKey("PracEmployerId");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracContact", b =>
                {
                    b.Navigation("pracCpdPoints");

                    b.Navigation("pracPaymentInformation");

                    b.Navigation("pracPlacements");

                    b.Navigation("pracQualifications");

                    b.Navigation("pracRequirements");

                    b.Navigation("pracStudentApproval");
                });

            modelBuilder.Entity("Practitioner.Domain.Entity.PracEmployer", b =>
                {
                    b.Navigation("pracBalances");

                    b.Navigation("pracCpdPoints");

                    b.Navigation("pracDocuments");

                    b.Navigation("pracPaymentInformation");

                    b.Navigation("pracPlacements");

                    b.Navigation("pracQualifications");

                    b.Navigation("pracRequirements");

                    b.Navigation("pracStudentApproval");
                });
#pragma warning restore 612, 618
        }
    }
}
